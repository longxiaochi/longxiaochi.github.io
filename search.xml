<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NSDateFormatter的使用</title>
    <url>/2021/05/07/Jenkins%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="jenkins安装"><a href="#jenkins安装" class="headerlink" title="jenkins安装"></a>jenkins安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install jenkins</span><br></pre></td></tr></table></figure>
<p>安装完成后，开启jenkins服务或者每次手动开启jenkins(一般用第一种比较方便)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #启动jenkins</span><br><span class="line"> brew services start jenkins</span><br><span class="line"> #停止jenkins </span><br><span class="line"> brew services stop jenkins</span><br><span class="line"> #重启jenkins</span><br><span class="line"> brew services restart jenkins</span><br><span class="line"> </span><br><span class="line"> #直接启动jenkins</span><br><span class="line">jenkins</span><br></pre></td></tr></table></figure>
<p>打开浏览器，输入localhost:8080,去相关路径找到密码复制进去即可</p>
<a id="more"></a>

<h3 id="配置打包工程"><a href="#配置打包工程" class="headerlink" title="配置打包工程"></a>配置打包工程</h3><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>安装推荐的插件， 会存在部分失败的情况。</p>
<ol>
<li><p>安装GitLab插件<br>因为我们用的是GitLab来管理源代码，Jenkins本身并没有自带GitLab插件，所以我们需要依次选择系统管理-&gt;管理插件，在“可选插件”中选中“GitLab Plugin”和“Gitlab Hook Plugin”这两项，然后安装。</p>
</li>
<li><p>在安装下面插件之前如果你之前安装Jenkins时有的插件没有安装成功，选择系统管理-&gt;管理插件页面会有下图的提示页面，需要手动搜索安装没成功的插件，然后才能安装下面的几个插件。</p>
</li>
</ol>
<h4 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h4><p>在Jenkins中，所有的任务都是以“item”为单位的。接下来我们就新建一个iOS的项目来开始自动化构建。点击“新建”，输入item的名称，选择“构建一个自由风格的软件项目”，然后点击“OK”</p>
<h5 id="源码管理："><a href="#源码管理：" class="headerlink" title="源码管理："></a>源码管理：</h5><p>这里用到的是GitLab，先需要配置SSH，我们可以在Jenkins的证书管理中添加SSH。在Jenkins管理页面，选择“Credentials”，然后选择“Global credentials (unrestricted)”，点击“Add Credentials”，我们填写自己的SSH信息，然后点击“Save”，这样就把SSH添加到Jenkins的全局域中去了。(私钥位置：  ~/.ssh/id_rsa) 如果正常的配置正确的话，是不会红色的警告</p>
<h3 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h3><ol>
<li>拉取代码超时<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15:33:37  &gt; &#x2F;usr&#x2F;bin&#x2F;git fetch --tags --force --progress -- git@52.221.152.145:ios&#x2F;patpat.git +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;* # timeout&#x3D;10</span><br><span class="line">15:43:37 ERROR: Timeout after 10 minutes</span><br><span class="line">15:43:37 ERROR: Error fetching remote repo &#39;origin&#39;</span><br><span class="line">15:43:37 hudson.plugins.git.GitException: Failed to fetch from git@52.221.152.145:ios&#x2F;patpat.git</span><br><span class="line">15:43:37 	at hudson.plugins.git.GitSCM.fetchFrom(GitSCM.java:1000)</span><br><span class="line">15:43:37 	at hudson.plugins.git.GitSCM.retrieveChanges(GitSCM.java:1241)</span><br><span class="line">15:43:37 	at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1301)</span><br><span class="line">15:43:37 	at hudson.scm.SCM.checkout(SCM.java:505)</span><br><span class="line">15:43:37 	at hudson.model.AbstractProject.checkout(AbstractProject.java:1215)</span><br><span class="line">15:43:37 	at hudson.model.AbstractBuild$AbstractBuildExecution.defaultCheckout(AbstractBuild.java:640)</span><br><span class="line">15:43:37 	at jenkins.scm.SCMCheckoutStrategy.checkout(SCMCheckoutStrategy.java:86)</span><br><span class="line">15:43:37 	at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:512)</span><br><span class="line">15:43:37 	at hudson.model.Run.execute(Run.java:1912)</span><br><span class="line">15:43:37 	at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)</span><br><span class="line">15:43:37 	at hudson.model.ResourceController.execute(ResourceController.java:100)</span><br><span class="line">15:43:37 	at hudson.model.Executor.run(Executor.java:432)</span><br><span class="line">15:43:37 Caused by: hudson.plugins.git.GitException: Command &quot;&#x2F;usr&#x2F;bin&#x2F;git fetch --tags --force --progress -- git@52.221.152.145:ios&#x2F;patpat.git +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*&quot; returned status code 143:</span><br></pre></td></tr></table></figure>
解决方案：<br>进入项目配置，在”源码管理”中，找到Additional Behaviours点击旁边的新增，选择advanced clone behavious，在克隆和拉取的超时时间(分钟)输入框中填入你需要的超时时间。（60分钟）<a href="https://cloud.tencent.com/developer/article/1551178" target="_blank" rel="noopener">参考链接</a></li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]<a href="https://cloud.tencent.com/developer/article/1551178" target="_blank" rel="noopener">解决jenkins git timeout</a></p>
<p>[2]<a href="https://www.jianshu.com/p/3b43776ed73f" target="_blank" rel="noopener">iOS持续集成:Jenkins+GitLab+蒲公英</a></p>
<p>[3]<a href="https://juejin.cn/post/6884946227801096205" target="_blank" rel="noopener">jenkins+gitlab+fastlane一键打包上传至蒲公英和Fir</a></p>
]]></content>
      <categories>
        <category>技术 - CI</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 可选项</title>
    <url>/2020/07/07/%E5%8F%AF%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="可选项"><a href="#可选项" class="headerlink" title="可选项"></a>可选项</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>可选项，也称为可选类型，它允许将值设置为nil。</li>
<li>在类型名称后面加一个? 来定义一个可选项。<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例子1</span></span><br><span class="line"><span class="keyword">var</span> num: <span class="type">Int?</span> = <span class="number">10</span></span><br><span class="line">num = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子2</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Int?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= array.<span class="built_in">count</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array[index]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="强制解包"><a href="#强制解包" class="headerlink" title="强制解包"></a>强制解包</h3><p>可选项是其他类型的一层包装。可以理解为一个空盒子。</p>
<ul>
<li>如果为nil, 则可以理解为空盒子</li>
<li>不为nil, 则可以理解为盒子里装的是：被包装类型的数据</li>
</ul>
<p>要想从可选项中取出被包装的数据，则需要使用感叹号！进行强制解包。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age: <span class="type">Int?</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> ageInt: <span class="type">Int</span> = age!  <span class="comment">//进行强制解包</span></span><br><span class="line">ageInt += <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>注意： 如果对空的可选项进行强制解包，会报运行时错误。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line">age!   <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure>

<h3 id="可选项绑定"><a href="#可选项绑定" class="headerlink" title="可选项绑定"></a>可选项绑定</h3><p>可以使用可选项绑定来判断一个可选项是否包含值。</p>
<ul>
<li>如果包含值就会进行自动解包，将值赋值给一个临时的常量(let）或者 变量（var）,并返回true， 否则返回false。<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> num = <span class="type">Int</span>(<span class="string">"123"</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"可选项绑定失败"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="可选项的并运行符"><a href="#可选项的并运行符" class="headerlink" title="可选项的并运行符"></a>可选项的并运行符</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> num1 = <span class="type">Int</span>(<span class="string">"4"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> num2 = <span class="type">Int</span>(<span class="string">"2"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> num1 &gt; num2 &amp;&amp; num2 &gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(num1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> num1 = <span class="type">Int</span>(<span class="string">"4"</span>), </span><br><span class="line">   <span class="keyword">let</span> num2 = <span class="type">Int</span>(<span class="string">"2"</span>), </span><br><span class="line">   num1 &gt; num2 &amp;&amp; num2 &gt; <span class="number">1</span> &#123;</span><br><span class="line">     <span class="built_in">print</span>(num1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上面两种写法是等价的。</span><br></pre></td></tr></table></figure>

<h3 id="空合并运算符"><a href="#空合并运算符" class="headerlink" title="空合并运算符 ??"></a>空合并运算符 ??</h3><p>a ?? b</p>
<ul>
<li>a 是可选项。</li>
<li>b 是可选项和非可选项都可以。</li>
<li>a 和 b 的存储类型必须相同。</li>
<li>如果 a 不为nil， 则直接返回a。</li>
<li>如果 a 为nil, 则返回b。</li>
<li>如果 b 是非可选项，在返回a 时需要对a进行强制解包。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="type">Int?</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = a ?? b    <span class="comment">// Option(1), c 是可选项</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = a ?? b    <span class="comment">// Option(2), c 是可选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = a ?? b    <span class="comment">// nil, c 是可选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = a ?? b    <span class="comment">// 2, c 是非可选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a: <span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = a ?? b    <span class="comment">// 2, c 是非可选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a: <span class="type">Int?</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = a ?? b ?? <span class="number">3</span>   <span class="comment">// 1, c 是非可选项</span></span><br></pre></td></tr></table></figure>

<h3 id="和-if-let配合使用"><a href="#和-if-let配合使用" class="headerlink" title="?? 和 if let配合使用"></a>?? 和 if let配合使用</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int</span>？= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="built_in">c</span> = a ?? b &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">c</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于 if a != nil || b != nil &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="guard-语句"><a href="#guard-语句" class="headerlink" title="guard 语句"></a>guard 语句</h3><p>guard 语句适合用来做提前退出。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">guard</span> 条件 <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 退出当前作用域 return\break\continue\throw error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>当guard 语句条件为true时，跳过大括号，执行后面的语句。</li>
<li>当guard 语句条件为false时，会进入大括号， 执行大括号里的内容。</li>
<li>当使用guard 语句进行可选项绑定时，绑定的临时常量或者变量 能在外层作用域内使用。<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(<span class="number">_</span> info[String, String])</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> username = info[<span class="string">"username"</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请输入用户名"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"用户名为：\(username)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="隐式解包-Implicitly-Unwrapped-Optional"><a href="#隐式解包-Implicitly-Unwrapped-Optional" class="headerlink" title="隐式解包(Implicitly Unwrapped Optional)"></a>隐式解包(Implicitly Unwrapped Optional)</h3><p>在某些情况下，可选项一旦被赋值，就会一直有值。 在这种情况下可以去掉检查，不必每次访问时都进行解包，因为它每次访问的时候都有值。可以在类型后面加一个感叹号！，定义一个隐式解包的可选项。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1: <span class="type">Int!</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> num2: <span class="type">Int</span> = num1   <span class="comment">// 进行了隐式解包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num1 != <span class="literal">nil</span> &#123;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> num = num1  &#123;  <span class="comment">// num1 是可选类型，可进行可选项绑定</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意： 当隐式解包可选项值为nil,使用时会报错。<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1: <span class="type">Int!</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> num2: <span class="type">Int</span> = num1   <span class="comment">// 隐式解包报错 Fatal error: Unexpectedly found nil while implicitly unwrapping an Optional value</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h3><p>可选项在字符串插值或者直接打印时，会出现警告。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age: <span class="type">Int?</span> = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"your age is \(age)"</span>)  <span class="comment">// 会有警告~</span></span><br></pre></td></tr></table></figure>
<p>消除警告的三种方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age: <span class="type">Int?</span> = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"your age is \(age!)"</span>)  <span class="comment">// 强制解包</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"your age is \(String(describing:age))"</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"your age is \(age ?? 0))"</span>)  <span class="comment">//空合并运算符</span></span><br></pre></td></tr></table></figure>

<h3 id="多重可选项"><a href="#多重可选项" class="headerlink" title="多重可选项"></a>多重可选项</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例子1</span></span><br><span class="line"><span class="keyword">var</span> num1: <span class="type">Int?</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2: <span class="type">Int?</span>? = num1</span><br><span class="line"><span class="keyword">var</span> num3: <span class="type">Int?</span>? = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num2 == num3)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子2</span></span><br><span class="line"><span class="keyword">var</span> num1: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> num2: <span class="type">Int?</span>? = num1</span><br><span class="line"><span class="keyword">var</span> num3: <span class="type">Int?</span>? = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num2 == num3)  <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 理解： num2 是有值的，值为num1, 但是num3的值为nil。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num1 == num3) <span class="comment">// false ，原因：类型不相同。</span></span><br></pre></td></tr></table></figure>

<p>可以使用lldb指令 frame variable -R 或者 fr v -R 来查看区别。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>移除链表元素</title>
    <url>/2020/06/17/203.%20%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h3 id="141-移除链表元素"><a href="#141-移除链表元素" class="headerlink" title="141. 移除链表元素"></a>141. 移除链表元素</h3><p>删除链表中等于给定值 val 的所有节点。</p>
<p>示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">6</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span>, val = <span class="number">6</span></span><br><span class="line">输出: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>链接： <a href="https://leetcode-cn.com/problems/remove-linked-list-elements/submissions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-linked-list-elements/submissions/</a></p>
<a id="more"></a>
<p>题解：</p>
<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line">        ListNode preHead = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val == val) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (newHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">                     <span class="comment">// 这里就要进行处理了。</span></span><br><span class="line">                    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        preHead.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    head.val = head.next.val;</span><br><span class="line">                    head.next = head.next.next;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (newHead == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    newHead = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            preHead = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeElements</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> virtualHead = <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">        virtualHead.next = head</span><br><span class="line">        <span class="keyword">var</span> pre: <span class="type">ListNode?</span> = virtualHead</span><br><span class="line">        <span class="keyword">var</span> cur: <span class="type">ListNode?</span> = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> <span class="number">_</span> = cur &#123;</span><br><span class="line">            <span class="keyword">if</span> cur?.val == val &#123;</span><br><span class="line">                pre?.next = cur?.next</span><br><span class="line">                cur = cur?.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur?.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> virtualHead.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>参考答案</p>
</li>
<li><p>Java<br>哨兵方式：增加一个虚拟头结点。统一删除的方式。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    ListNode sentinel = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    sentinel.next = head;</span><br><span class="line"></span><br><span class="line">    ListNode prev = sentinel, curr = head;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (curr.val == val) prev.next = curr.next;</span><br><span class="line">      <span class="keyword">else</span> prev = curr;</span><br><span class="line">      curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sentinel.next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Swift<br>主要思想就是偷节点。<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeElements</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> pHead = head</span><br><span class="line">        <span class="keyword">let</span> newHead = <span class="type">ListNode</span>.<span class="keyword">init</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> newTrail = newHead</span><br><span class="line">        <span class="keyword">while</span> pHead != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> pHead?.val != val &#123;</span><br><span class="line">                newTrail.next = pHead</span><br><span class="line">                newTrail = newTrail.next!</span><br><span class="line">            &#125;</span><br><span class="line">            pHead = pHead?.next</span><br><span class="line">        &#125;</span><br><span class="line">        newTrail.next = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">return</span> newHead.next</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法 - 链表</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>反转一个单链表</title>
    <url>/2020/06/15/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="206-反转一个单链表。"><a href="#206-反转一个单链表。" class="headerlink" title="206.反转一个单链表。"></a>206.反转一个单链表。</h3><p>示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;NULL</span><br><span class="line">输出: <span class="number">5</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span>-&gt;NULL<span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list</a></p>
<a id="more"></a>
<p>题解：</p>
<ul>
<li>递归 </li>
</ul>
<p>1-&gt;2-&gt;3-&gt;4-&gt;5 在1到2之间切成两部分，将2之后的内容传入函数，输出5-&gt;4-&gt;3-&gt;2&lt;-1 , 此时1 和 2 的联系依然在， 1.next就是2， 所以只要将2.next指向1，并将1.next-&gt;null 即可完成链表的翻转。即 1.next.next = 1;  1.next = null;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">		ListNode node = reverseList(head.next);</span><br><span class="line">		head.next.next = head;</span><br><span class="line">		head.next = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>迭代</li>
</ul>
<p>画图会比较明了。(补图)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新头部</span></span><br><span class="line">	    	ListNode newHead = <span class="keyword">null</span>;   </span><br><span class="line">	    	<span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">	    		ListNode tmp = head.next;   <span class="comment">// 保住head后面的狗头</span></span><br><span class="line">	    		head.next = newHead;</span><br><span class="line">	    		newHead = head;</span><br><span class="line">	    		head = tmp;</span><br><span class="line">			&#125;</span><br><span class="line">	    	<span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法 - 链表</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>环形链表</title>
    <url>/2020/06/15/141.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a>141. 环形链表</h3><p>给定一个链表，判断链表中是否有环。</p>
<p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>
<a id="more"></a>
<p>示例 1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：head = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">4</span>], pos = <span class="number">1</span></span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>], pos = <span class="number">0</span></span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<p>示例 3：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>], pos = -<span class="number">1</span></span><br><span class="line">输出：<span class="keyword">false</span></span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure>



<p>进阶：</p>
<p>你能用 O(1)（即，常量）内存解决此问题吗？</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>使用快慢指针思想解决。想象一下在学校操场的环形跑道上，有两个运动员，他们跑步的速度不一致。那么速度快的在一段时间后肯定能追上跑得慢的。 </p>
<ul>
<li>需要注意的是： 快慢指针之间的间隔一定得合理。不然有可能要循环很多遍(容易错过)。 慢的走一步，快的走两步这样的节奏比较合理。 一定能追上，可画图分析。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">             slow = slow.next;</span><br><span class="line">             fast = fast.next.next;</span><br><span class="line">             <span class="keyword">if</span> (slow == fast) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法 - 链表</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>237. 删除链表中的节点</title>
    <url>/2020/06/15/237.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>链表、动态数组</title>
    <url>/2020/06/14/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="链表、动态数组"><a href="#链表、动态数组" class="headerlink" title="链表、动态数组"></a>链表、动态数组</h3><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol>
<li>动态数组和链表都是线性表，对外的接口基本一致。可使用一套接口。</li>
<li>抽象类不用实现所有的接口，公共方法的实现可放在抽象类实现。(抽象类应只提供给内部使用)</li>
<li>动态数组的元素的内存地址是连续的。有个缺点，可能会造成内存空间的大量浪费。</li>
<li>链表是一种链式存储的线性表。可以做到需要多少空间就申请多少内存，所有元素的内存地址不一定是连续的。</li>
</ol>
<a id="more"></a>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul>
<li><p>List 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链表和动态数组都是线性表，对外的接口都是一致的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 元素未找到标识</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 清除所有元素</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 元素的数量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否为空</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否包含某个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加元素到尾部</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查看元素的索引</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类 AbstractList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 抽象类 AbstractList</span></span><br><span class="line"><span class="comment">// 抽象类无需全部实现接口, 所以可以将公共部分代码放到抽象类实现。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 内容大小, 使用protected 子类可访问。</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 元素的数量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否为空</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		 <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否包含某个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加元素到尾部</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		add(size, element);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 自定义下标越界异常</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 检查下标是否有效</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">			outOfBounds(index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 为添加方法检查下标是否有效</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">			outOfBounds(index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>LinkedList 链表实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. LinkedList 链表实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">	<span class="comment">// 链表的首节点</span></span><br><span class="line">	<span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 内部类，节点结构</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">		E element;</span><br><span class="line">		Node&lt;E&gt; next;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>();</span><br><span class="line">			<span class="keyword">this</span>.element = element;</span><br><span class="line">			<span class="keyword">this</span>.next = next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> nodeOf(index).element;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		Node&lt;E&gt; node = nodeOf(index);</span><br><span class="line">		E oldValue = node.element;</span><br><span class="line">		node.element = element;</span><br><span class="line">		<span class="keyword">return</span> oldValue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">		rangeCheckForAdd(index);</span><br><span class="line">		<span class="comment">// 需要区别头部插入和其他位置插入</span></span><br><span class="line">		<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">			first = <span class="keyword">new</span> Node&lt;E&gt;(element, first);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Node&lt;E&gt; prev = nodeOf(index-<span class="number">1</span>);</span><br><span class="line">			prev.next = <span class="keyword">new</span> Node&lt;E&gt;(element, prev.next);</span><br><span class="line">		&#125;</span><br><span class="line">		size++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		E oldValue = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">		   oldValue = first.element;</span><br><span class="line">		   first = first.next;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Node&lt;E&gt;pre = nodeOf(index-<span class="number">1</span>);</span><br><span class="line">			oldValue = pre.next.element;</span><br><span class="line">			pre.next = pre.next.next;</span><br><span class="line">		&#125;</span><br><span class="line">		size --;</span><br><span class="line">		<span class="keyword">return</span> oldValue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查看元素的索引</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		Node&lt;E&gt; node = first;</span><br><span class="line">		<span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; node.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">return</span> i;</span><br><span class="line">				&#125;</span><br><span class="line">				node = node.next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; element.equals(node.element)) &#123;</span><br><span class="line">					<span class="keyword">return</span> i;</span><br><span class="line">				&#125;</span><br><span class="line">				node = node.next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 清除所有元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		first = <span class="keyword">null</span>;</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取某个下标的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">nodeOf</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		Node&lt;E&gt; node = first; </span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">			node = node.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> node;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 自定义打印方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuilder buider = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		buider.append(<span class="string">"size: "</span>).append(size).append(<span class="string">" element: "</span>).append(<span class="string">"["</span>);</span><br><span class="line">		Node&lt;E&gt; node = first;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">				buider.append(<span class="string">","</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			buider.append(node.element);</span><br><span class="line">			node = node.next;</span><br><span class="line">		&#125;</span><br><span class="line">		buider.append(<span class="string">"]"</span>);</span><br><span class="line">		<span class="keyword">return</span> buider.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态数组 ArrayList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. ArrayList 动态数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">	<span class="comment">// 默认容量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 数组元素列表</span></span><br><span class="line">	<span class="keyword">private</span> E[] elements;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 构造函数</span></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 保持最小容量是DEFAULT_CAPACITY</span></span><br><span class="line">		capacity = capacity &lt; DEFAULT_CAPACITY ? DEFAULT_CAPACITY : capacity;</span><br><span class="line">		elements = (E[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 清除所有元素</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			elements[i] = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		<span class="keyword">return</span> elements[index];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">		E old = elements[index];</span><br><span class="line">		elements[index] = element;</span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">		rangeCheckForAdd(index);</span><br><span class="line">		ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--) &#123;</span><br><span class="line">			elements[i] = elements[i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		elements[index] = element;</span><br><span class="line">		size++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">		E old = elements[index];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">			elements[i - <span class="number">1</span>] = elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		elements[--size] = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查看元素的索引</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;  <span class="comment">// 1</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (elements[i] == <span class="keyword">null</span>) <span class="keyword">return</span> i; </span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (element.equals(elements[i])) <span class="keyword">return</span> i; <span class="comment">// n</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 保证要有capacity的容量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">		<span class="keyword">if</span> (oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line">		<span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			newElements[i] = elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		elements = newElements;</span><br><span class="line">		</span><br><span class="line">		System.out.println(oldCapacity + <span class="string">"扩容为"</span> + newCapacity);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 自定义打印格式</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">				string.append(<span class="string">", "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			string.append(elements[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		string.append(<span class="string">"]"</span>);</span><br><span class="line">		<span class="keyword">return</span> string.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://visualgo.net/zh" target="_blank" rel="noopener">学习数据结构神奇的网站</a></p>
]]></content>
      <categories>
        <category>数据结构 - 链表</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>动态数组</title>
    <url>/2020/06/13/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h3 id="实现一个动态数组。"><a href="#实现一个动态数组。" class="headerlink" title="实现一个动态数组。"></a>实现一个动态数组。</h3><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol>
<li>动态数组需要支持存储多种类型数据。所以使用泛型。</li>
<li>indexOf函数使用equals进行对象比较。而不使用==，理由：equals 支持泛型对象通过重写equals方法，自定义比较规则，如果没有自定义则比较地址。 而 == 则是直接比较地址是否相同。 </li>
<li>数组扩容使用了 &gt;&gt; (位运算符)，效率相比 *、/ 较高。</li>
<li>数组(elements)存放的是对象的堆空间的内存地址。 clear 清空时,需要将所有对象的引用清空(置为null）。Java有垃圾回收机制，在当内存不足时会将不用的内存回收。(并不是马上回收，如需马上回收需要主动调用 System.gc() 方法)。<a id="more"></a>
<h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h4></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.longchi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 默认容量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">// 元素未找到标识</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 数组元素列表</span></span><br><span class="line">	<span class="keyword">private</span> E[] elements;</span><br><span class="line">	<span class="comment">// 数组大小</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 构造函数</span></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 保持最小容量是DEFAULT_CAPACITY</span></span><br><span class="line">		capacity = capacity &lt; DEFAULT_CAPACITY ? DEFAULT_CAPACITY : capacity;</span><br><span class="line">		elements = (E[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 清除所有元素</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			elements[i] = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 元素的数量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否为空</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		 <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否包含某个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加元素到尾部</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		add(size, element);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		<span class="keyword">return</span> elements[index];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">		E old = elements[index];</span><br><span class="line">		elements[index] = element;</span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">		rangeCheckForAdd(index);</span><br><span class="line">		ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--) &#123;</span><br><span class="line">			elements[i] = elements[i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		elements[index] = element;</span><br><span class="line">		size++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除index位置的元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">		E old = elements[index];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">			elements[i - <span class="number">1</span>] = elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		elements[--size] = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">return</span> old;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查看元素的索引</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;  <span class="comment">// 1</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (elements[i] == <span class="keyword">null</span>) <span class="keyword">return</span> i; </span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (element.equals(elements[i])) <span class="keyword">return</span> i; <span class="comment">// n</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 保证要有capacity的容量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">		<span class="keyword">if</span> (oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line">		<span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			newElements[i] = elements[i];</span><br><span class="line">		&#125;</span><br><span class="line">		elements = newElements;</span><br><span class="line">		</span><br><span class="line">		System.out.println(oldCapacity + <span class="string">"扩容为"</span> + newCapacity);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">			outOfBounds(index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">			outOfBounds(index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 自定义打印格式</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">				string.append(<span class="string">", "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			string.append(elements[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		string.append(<span class="string">"]"</span>);</span><br><span class="line">		<span class="keyword">return</span> string.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构 - 动态数组</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>NSDateFormatter的使用</title>
    <url>/2020/01/20/NSDateFormatter%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="NSDateFormatter-的基本使用"><a href="#NSDateFormatter-的基本使用" class="headerlink" title="NSDateFormatter 的基本使用"></a>NSDateFormatter 的基本使用</h3><p>NSDateFormatter 常用于iOS时间格式处理。现在来简单了解下。系统自带了几种格式：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef NS_ENUM(NSUInteger, NSDateFormatterStyle) &#123;    </span><br><span class="line">    NSDateFormatterNoStyle &#x3D; kCFDateFormatterNoStyle,</span><br><span class="line">    NSDateFormatterShortStyle &#x3D; kCFDateFormatterShortStyle,</span><br><span class="line">    NSDateFormatterMediumStyle &#x3D; kCFDateFormatterMediumStyle,</span><br><span class="line">    NSDateFormatterLongStyle &#x3D; kCFDateFormatterLongStyle,</span><br><span class="line">    NSDateFormatterFullStyle &#x3D; kCFDateFormatterFullStyle</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">格式</th>
<th align="center">日期</th>
<th align="center">时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NSDateFormatterNoStyle</td>
<td align="center">“”</td>
<td align="center">“”</td>
</tr>
<tr>
<td align="center">NSDateFormatterShortStyle</td>
<td align="center">2020/1/20</td>
<td align="center">下午5:19</td>
</tr>
<tr>
<td align="center">NSDateIntervalFormatterMediumStyle</td>
<td align="center">2020年1月20日</td>
<td align="center">下午5:18:48</td>
</tr>
<tr>
<td align="center">NSDateIntervalFormatterLongStyle</td>
<td align="center">2020年1月20日</td>
<td align="center">GMT+8 下午5:19:51</td>
</tr>
<tr>
<td align="center">NSDateIntervalFormatterFullStyle</td>
<td align="center">2020年1月20日 星期一</td>
<td align="center">中国标准时间 下午5:21:00</td>
</tr>
</tbody></table>
<p>样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSDateFormatter *dateFormatter &#x3D; [[NSDateFormatter alloc] init];</span><br><span class="line">dateFormatter.locale &#x3D; [[NSLocale alloc] initWithLocaleIdentifier:@&quot;zh&quot;];</span><br><span class="line">dateFormatter.dateStyle &#x3D; NSDateIntervalFormatterMediumStyle;</span><br><span class="line">dateFormatter.timeStyle &#x3D; NSDateIntervalFormatterMediumStyle;</span><br><span class="line">NSString *dateStr &#x3D; [dateFormatter stringFromDate:[NSDate date]];</span><br></pre></td></tr></table></figure>
<h3 id="自定义时间格式"><a href="#自定义时间格式" class="headerlink" title="自定义时间格式"></a>自定义时间格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSDateFormatter *dateFormatter &#x3D; [[NSDateFormatter alloc] init];</span><br><span class="line">[dateFormatter setDateFormat:@&quot;MMM dd, yyyy&quot;];</span><br><span class="line"></span><br><span class="line">dateFormatter.locale &#x3D; [NSLocale currentLocale];</span><br><span class="line">dateFormatter.timeZone &#x3D; [NSTimeZone systemTimeZone];</span><br><span class="line">NSString *timeStr &#x3D; [dateFormatter stringFromDate:date];</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数参考：</span><br><span class="line">GGG: 公元时代，例如AD公元</span><br><span class="line">yy: 年的后2位</span><br><span class="line">yyyy: 完整年</span><br><span class="line">MM: 月，显示为1-12</span><br><span class="line">MMM: 月，显示为英文月份简写,如 Jan</span><br><span class="line">MMMM: 月，显示为英文月份全称，如 Janualy</span><br><span class="line">dd: 日，2位数表示，如02</span><br><span class="line">d: 日，1-2位显示，如 2</span><br><span class="line">EEE: 简写星期几，如Sun</span><br><span class="line">EEEE: 全写星期几，如Sunday</span><br><span class="line">aa: 上下午，AM&#x2F;PM</span><br><span class="line">H: 时，24小时制，0-23</span><br><span class="line">K：时，12小时制，0-11</span><br><span class="line">m: 分，1-2位</span><br><span class="line">mm: 分，2位</span><br><span class="line">s: 秒，1-2位</span><br><span class="line">ss: 秒，2位</span><br><span class="line">S：毫秒</span><br><span class="line">zzz：三位字符串表示“时区”（例如GMT）。缩写 Z</span><br></pre></td></tr></table></figure>
<h3 id="NSLocale"><a href="#NSLocale" class="headerlink" title="NSLocale:"></a>NSLocale:</h3><p> NSLocale是一个包含所有地区的语言与文化习俗的基础类。一个NSLocale的实例包含了针对这个地区内特定一群人的所有语言文化基准，其中包括：语言、键盘、数字、日期和时间格式、货币、排序和分类、符号、颜色与头像的使用。</p>
<p> NSLocale与设备的设置有关：<br> 系统的设置 -＞ 通用 -＞ 多语言环境 -＞ 区域格式<br> 系统的设置 -＞ 通用 -＞ 日期与时间 -＞ 24小时制</p>
<p>1.+ (id)systemLocale : 设备默认的本地化信息。当不想用用户设定的本地化信息时，使用systemLocale对象来设置你想要的效果。</p>
<hr>
<p>2.+ (id)currentLocale : 当前用户设定的本地化信息，即使修改了本地化设定，这个对象也不会改变。currentLocale取得的值可能被缓存在cache中。（不会跟随用户改变设置而改变）要想知道变化，则需要监听：NSCurrentLocaleDidChangeNotification</p>
<hr>
<p>3.+ (id)autoupdatingCurrentLocale: 当前用户设定的本地化信息，此对象总是最新的本地化信息。（随着用户改变设置改变）</p>
<hr>
<ul>
<li>标示符初始化本地化信息<ul>
<li>[[NSLocale alloc] initWithLocaleIdentifier:@”en_US”]; 指定语言与地区码。</li>
</ul>
</li>
<li>参考： <ol>
<li><a href="https://nshipster.cn/nslocale/" target="_blank" rel="noopener">https://nshipster.cn/nslocale/</a> </li>
<li><a href="https://www.jianshu.com/p/38318cfbf986" target="_blank" rel="noopener">https://www.jianshu.com/p/38318cfbf986</a></li>
<li><a href="https://www.jianshu.com/p/0b5b576dcb99#chapter2" target="_blank" rel="noopener">https://www.jianshu.com/p/0b5b576dcb99#chapter2</a></li>
</ol>
</li>
</ul>
<h3 id="NSTimeZone"><a href="#NSTimeZone" class="headerlink" title="NSTimeZone:"></a>NSTimeZone:</h3><p>NSTimeZone与设备的设置有关：系统的设置 -＞ 通用 -＞ 日期与时间 -＞ 时区  </p>
<p>1.+ (NSTimeZone *)systemTimeZone;<br>设备系统时区，不能代码修改。(大伙的iPhone都是自动默认北京，如在手机‘设置’修改为伦敦，返回伦敦时区)</p>
<p>2.+ (NSTimeZone *)localTimeZone;<br>本地时区，默认与systemTimeZone一致，可用代码修改。</p>
<p>3.+ (NSTimeZone *)defaultTimeZone;<br>默认时区，程序中定义的默认时区，默认与默认与systemTimeZone一致，可用代码修改。</p>
<p>4.+ (void)setDefaultTimeZone:(NSTimeZone *)aTimeZone;<br>用此方法可以改变localTimeZone、defaultTimeZone的值，(systemTimeZone不可改变)</p>
<p>5.[NSTimeZone timeZoneWithName:@”UTC”]: 获取指定时区。</p>
]]></content>
      <categories>
        <category>技术 - Objective-C</category>
      </categories>
      <tags>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
